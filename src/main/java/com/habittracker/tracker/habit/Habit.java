package com.habittracker.tracker.habit;

import com.habittracker.tracker.classes.Icon;
import jakarta.persistence.*;

import java.time.LocalTime;
import java.util.ArrayList;


@Entity // This class is an entity which will occupy one row in the database
@Table // Specifies the details of the table associated with Habit. Same as class name
public class Habit {

    @Id // Sets Id as the primary key
    @SequenceGenerator( // specifies the generation strategy for primary key values.
            name = "habit_sequence",
            sequenceName = "habit_sequence",
            allocationSize = 1,
            initialValue = 0
    )
    @GeneratedValue( // Indicates th value of Id automatically generated by the specified generator
            strategy = GenerationType.SEQUENCE,
            generator = "habit_sequence"
    )
    private Long id;
    private String name;
    private String description;
    //private Icon icon; // each icon will have an assigned number
    private String icon; // will change back to Icon type or make front end read the string and apply the correct image
    private LocalTime reminder;
    private Integer streak;

    public static ArrayList<Icon> iconList = new ArrayList<>();

    public Habit() {

    }
    public Habit(Long id, String name, String description, String icon, LocalTime reminder, Integer streak) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.icon = icon;
        this.reminder = reminder;
        this.streak = streak;
    }

    public Habit(String name, String description, String icon, LocalTime reminder, Integer streak) {
        this.name = name;
        this.description = description;
        this.icon = icon;
        this.reminder = reminder;
        this.streak = streak;
    }

    public Long getHabitId() {
        return id;
    }

    public void setHabitId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getIcon() {
        return icon;
    }

    public void setIcon(String icon) {
        this.icon = icon;
    }
    public LocalTime getReminder() {
        return reminder;
    }

    public void setReminder(LocalTime reminder) {
        this.reminder = reminder;
    }
    public Integer getStreak() {
        return streak;
    }

    public void setStreak(Integer streak) {
        this.streak = streak;
    }

    @Override
    public String toString() {
        return  "Name: " + getName() + "\n" +
                "Description: " + getDescription() + "\n" +
                "Icon: " + getIcon() + "\n" +
                "Reminder: " + getReminder() + "\n" +
                "Streak: " + getStreak() + "\n"
                + "--------------------------------";
    }
}


//    public void setIcon(String userInput) {
//
//        // Search for the icon
//        Icon selectedIcon = null;
//        for (Icon icon : iconList) {
//            if (icon.getIconName().equalsIgnoreCase(userInput)) {
//                selectedIcon = icon;
//                break;
//            }
//        }
//        // Validates user input
//        if (selectedIcon == null) {
//            System.out.println("Invalid icon selected. Please try again.");
//
//        } else {
//            // Set the icon
//            this.icon = selectedIcon;
//            System.out.println("Chosen icon: " + selectedIcon.getIconName());
//        }
//    }
//
//    // Prints the string names of all available icons
//    public void getIconList() {
//        System.out.print("Available icons: ");
//        for (Icon icon : iconList) {
//            System.out.print(icon.getIconName() + ", ");
//        }    //todo multiples the list if icon is changed during the same create session
//    }
//
//    public static void addIcons() {
//        // Populates iconList with available icons
//        iconList.add(new Icon("leaf"));
//        iconList.add(new Icon("bike"));
//        iconList.add(new Icon("cutlery"));
//        iconList.add(new Icon("paw"));
//        iconList.add(new Icon("pizza"));
//        iconList.add(new Icon("smoking"));
//        iconList.add(new Icon("walk"));
//    }
//
